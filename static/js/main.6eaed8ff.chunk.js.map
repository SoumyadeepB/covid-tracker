{"version":3,"sources":["Components/Countries.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Countries","props","countries","this","countryData","map","country","index","Card","key","className","Img","variant","src","countryInfo","flag","Body","Title","Text","cases","recovered","deaths","todayCases","Fragment","queries","columns","query","React","Component","Header","Navbar","sticky","bg","Brand","href","App","useState","current","setCurrent","setCountryData","useEffect","axios","all","get","then","resArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","Container","fluid","CardDeck","text","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6eaed8ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Columns from \"react-columns\";\r\n\r\nclass Countries extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        var queries = [\r\n            {\r\n                columns: 2,\r\n                query: \"min-width: 500px\",\r\n            },\r\n            {\r\n                columns: 3,\r\n                query: \"min-width: 1000px\",\r\n            },\r\n        ];\r\n\r\n\r\n        const countries = this.props.countryData.map((country, index) => {\r\n            return (\r\n                <Card key={index} className=\"cards\">\r\n                    <Card.Img className=\"flag\" variant=\"top\" src={country.countryInfo.flag} />\r\n                    <Card.Body>\r\n                        <Card.Title>{country.country}</Card.Title>\r\n                        <Card.Text>\r\n                            Cases: {country.cases}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            Recovered: {country.recovered}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            Deaths: {country.deaths}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            Cases today: {country.todayCases}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>);\r\n        })\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Columns queries={queries} className=\"text-center\">\r\n                    {countries}\r\n                </Columns>\r\n            </React.Fragment>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Countries;\r\n","import React from \"react\";\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport \"../App.css\";\r\nclass Header extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Navbar sticky=\"top\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand className=\"centered\" href=\"#home\">\r\n                    Covid Tracker\r\n            </Navbar.Brand>\r\n            </Navbar>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Countries from \"./Components/Countries\";\nimport Header from \"./Components/Header\";\nimport \"./App.css\";\n\nfunction App() {\n  const [current, setCurrent] = useState([]);\n  const [countryData, setCountryData] = useState([]);\n\n  // Performs the effect(API Call) after each Render\n  useEffect(() => {\n    axios.all([\n      axios.get(\"https://corona.lmao.ninja/v2/all\"),\n      axios.get(\"https://corona.lmao.ninja/v2/countries\")\n    ]).\n      then(resArr => {\n        setCurrent(resArr[0].data);\n        setCountryData(resArr[1].data);\n      }).\n      catch(err => {\n        console.log(err);\n      });\n\n  });\n\n  var date = new Date(parseInt(current.updated));\n  var lastUpdated = date.toString();\n\n\n  return (\n    <div>\n      <Header />\n      <Container fluid>\n        <CardDeck className=\"cards\">\n          <Card bg=\"dark\" text=\"white\" >\n            <Card.Body>\n              <Card.Title>Cases</Card.Title>\n              <Card.Text>{current.cases}</Card.Text>\n            </Card.Body>\n            <Card.Footer>\n              <small>Last updated on {lastUpdated}</small>\n            </Card.Footer>\n          </Card>\n          <Card bg=\"success\" text=\"white\">\n            <Card.Body>\n              <Card.Title>Recovered</Card.Title>\n              <Card.Text>{current.recovered}</Card.Text>\n            </Card.Body>\n            <Card.Footer>\n              <small>Last updated on {lastUpdated}</small>\n            </Card.Footer>\n          </Card>\n          <Card bg=\"danger\" text=\"white\">\n            <Card.Body>\n              <Card.Title>Deaths</Card.Title>\n              <Card.Text>{current.deaths}</Card.Text>\n            </Card.Body>\n            <Card.Footer>\n              <small>Last updated on {lastUpdated}</small>\n            </Card.Footer>\n          </Card>\n        </CardDeck>\n        <Countries countryData={countryData} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}