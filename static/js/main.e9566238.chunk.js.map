{"version":3,"sources":["Components/Summary.js","Components/Countries.js","Components/Header.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Summary","props","cases","parseInt","this","current","recovered","deaths","CardDeck","className","Card","bg","text","Body","Title","Text","start","end","duration","delay","React","Component","Countries","searchText","search","toLowerCase","data","countryData","filter","item","country","includes","countries","map","index","key","Img","variant","src","countryInfo","flag","todayCases","Fragment","queries","columns","query","Header","Navbar","sticky","Brand","href","Footer","fixed","lastUpdated","App","useState","setCurrent","setCountryData","loaded","setLoaded","setSearch","useEffect","axios","all","get","then","resArr","catch","err","console","log","Date","updated","toString","active","spinner","Container","fluid","Form","Control","type","onChange","e","target","value","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e9566238.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport CountUp from 'react-countup';\r\nimport \"../App.css\";\r\n\r\nclass Summary extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n    }\r\n    render() {\r\n        var cases = parseInt(this.props.current.cases);\r\n        var recovered = parseInt(this.props.current.recovered);\r\n        var deaths = parseInt(this.props.current.deaths);\r\n        return (\r\n            <CardDeck className=\"summaryCards\">\r\n                <Card bg=\"dark\" text=\"white\" >\r\n                    <Card.Body>\r\n                        <Card.Title>Cases</Card.Title>\r\n                        <Card.Text className=\"summaryText\"><CountUp start={99999} end={cases || 100} duration={5} delay={100} /></Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card bg=\"success\" text=\"white\">\r\n                    <Card.Body>\r\n                        <Card.Title>Recovered</Card.Title>\r\n                        <Card.Text className=\"summaryText\"><CountUp start={99999} end={recovered || 100} duration={5} delay={100} />\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card bg=\"danger\" text=\"white\">\r\n                    <Card.Body>\r\n                        <Card.Title>Deaths</Card.Title>\r\n                        <Card.Text className=\"summaryText\"><CountUp start={99999} end={deaths || 100} duration={5} delay={100} />\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </CardDeck>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Summary;\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Columns from \"react-columns\";\r\n\r\nclass Countries extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        var queries = [\r\n            {\r\n                columns: 2,\r\n                query: \"min-width: 500px\",\r\n            },\r\n            {\r\n                columns: 3,\r\n                query: \"min-width: 750px\",\r\n            },\r\n            {\r\n                columns: 4,\r\n                query: \"min-width: 1000px\",\r\n            }\r\n        ];\r\n\r\n        var searchText = this.props.search.toLowerCase();\r\n        var data = this.props.countryData;\r\n        if (searchText) {\r\n            data = data.filter(item => {\r\n                var country = item.country.toLowerCase();\r\n                if (country.includes(searchText))\r\n                    return true;\r\n            });\r\n        }\r\n\r\n        const countries = data.map((item, index) => {\r\n            return (\r\n                <Card key={index} className=\"cards\">\r\n                    <Card.Img className=\"flag\" variant=\"top\" src={item.countryInfo.flag} />\r\n                    <Card.Body>\r\n                        <Card.Title>{item.country}</Card.Title>\r\n                        <Card.Text>\r\n                            Cases: {item.cases}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            Recovered: {item.recovered}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            Deaths: {item.deaths}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            Cases today: {item.todayCases}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>);\r\n        })\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Columns queries={queries} className=\"text-center country-deck\">\r\n                    {countries}\r\n                </Columns>\r\n            </React.Fragment>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Countries;\r\n","import React from \"react\";\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport \"../App.css\";\r\nclass Header extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar sticky=\"top\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand className=\"centered\" href=\"#home\">\r\n                    Covid Tracker\r\n            </Navbar.Brand>\r\n            </Navbar>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport \"../App.css\";\r\nclass Footer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <Navbar fixed=\"bottom\" variant=\"dark\" bg=\"dark\" className=\"footer\">\r\n                <small>Last updated on: {this.props.lastUpdated}</small>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Summary from \"./Components/Summary\";\nimport Countries from \"./Components/Countries\";\nimport Header from \"./Components/Header\";\nimport Footer from \"./Components/Footer\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport Form from 'react-bootstrap/Form'\nimport \"./App.css\";\n\nfunction App() {\n  const [current, setCurrent] = useState([]);\n  const [countryData, setCountryData] = useState([]);\n  const [loaded, setLoaded] = useState(true);\n  const [search, setSearch] = useState(\"\");\n  // Performs the effect(API Call) after each Render\n  useEffect(() => {\n    axios.all([\n      axios.get(\"https://corona.lmao.ninja/v2/all\"),\n      axios.get(\"https://corona.lmao.ninja/v2/countries\")\n    ]).\n      then(resArr => {\n        setCurrent(resArr[0].data);\n        setCountryData(resArr[1].data);\n        setLoaded(false);\n      }).\n      catch(err => {\n        console.log(err);\n      });\n\n  });\n\n  var date = new Date(parseInt(current.updated));\n  var lastUpdated = date.toString();\n\n  return (\n    <div >\n      <LoadingOverlay className=\"App\" active={loaded} spinner text=\"Loading stats...\">\n        <Header />\n        <Container fluid>\n          <Summary current={current} />\n          <Form.Control type=\"text\" onChange={e => setSearch(e.target.value)} placeholder=\"Search for a country...\" />\n          <Countries countryData={countryData} search={search} />\n        </Container>\n        <Footer lastUpdated={lastUpdated} />\n      </LoadingOverlay>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}